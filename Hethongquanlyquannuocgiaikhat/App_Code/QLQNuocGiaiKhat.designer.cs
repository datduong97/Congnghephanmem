#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CNPM_QLNGK")]
public partial class QLQNuocGiaiKhatDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAccount(Account instance);
  partial void UpdateAccount(Account instance);
  partial void DeleteAccount(Account instance);
  partial void InsertTableFood(TableFood instance);
  partial void UpdateTableFood(TableFood instance);
  partial void DeleteTableFood(TableFood instance);
  partial void InsertBill(Bill instance);
  partial void UpdateBill(Bill instance);
  partial void DeleteBill(Bill instance);
  partial void InsertBillInfo(BillInfo instance);
  partial void UpdateBillInfo(BillInfo instance);
  partial void DeleteBillInfo(BillInfo instance);
  partial void InsertBookedTable(BookedTable instance);
  partial void UpdateBookedTable(BookedTable instance);
  partial void DeleteBookedTable(BookedTable instance);
  partial void InsertDrink(Drink instance);
  partial void UpdateDrink(Drink instance);
  partial void DeleteDrink(Drink instance);
  partial void InsertDrinkCategory(DrinkCategory instance);
  partial void UpdateDrinkCategory(DrinkCategory instance);
  partial void DeleteDrinkCategory(DrinkCategory instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  partial void InsertFood(Food instance);
  partial void UpdateFood(Food instance);
  partial void DeleteFood(Food instance);
  partial void InsertFoodCategory(FoodCategory instance);
  partial void UpdateFoodCategory(FoodCategory instance);
  partial void DeleteFoodCategory(FoodCategory instance);
  #endregion
	
	public QLQNuocGiaiKhatDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CNPM_QLNGKConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public QLQNuocGiaiKhatDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public QLQNuocGiaiKhatDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public QLQNuocGiaiKhatDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public QLQNuocGiaiKhatDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Account> Accounts
	{
		get
		{
			return this.GetTable<Account>();
		}
	}
	
	public System.Data.Linq.Table<TableFood> TableFoods
	{
		get
		{
			return this.GetTable<TableFood>();
		}
	}
	
	public System.Data.Linq.Table<Bill> Bills
	{
		get
		{
			return this.GetTable<Bill>();
		}
	}
	
	public System.Data.Linq.Table<BillInfo> BillInfos
	{
		get
		{
			return this.GetTable<BillInfo>();
		}
	}
	
	public System.Data.Linq.Table<BookedTable> BookedTables
	{
		get
		{
			return this.GetTable<BookedTable>();
		}
	}
	
	public System.Data.Linq.Table<Drink> Drinks
	{
		get
		{
			return this.GetTable<Drink>();
		}
	}
	
	public System.Data.Linq.Table<DrinkCategory> DrinkCategories
	{
		get
		{
			return this.GetTable<DrinkCategory>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<Food> Foods
	{
		get
		{
			return this.GetTable<Food>();
		}
	}
	
	public System.Data.Linq.Table<FoodCategory> FoodCategories
	{
		get
		{
			return this.GetTable<FoodCategory>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Username;
	
	private string _DisplayName;
	
	private string _Password;
	
	private int _Type;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
	
	public Account()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string DisplayName
	{
		get
		{
			return this._DisplayName;
		}
		set
		{
			if ((this._DisplayName != value))
			{
				this.OnDisplayNameChanging(value);
				this.SendPropertyChanging();
				this._DisplayName = value;
				this.SendPropertyChanged("DisplayName");
				this.OnDisplayNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableFood")]
public partial class TableFood : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idTable;
	
	private string _name;
	
	private string _status;
	
	private EntitySet<Bill> _Bills;
	
	private EntityRef<BookedTable> _BookedTable;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTableChanging(int value);
    partial void OnidTableChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
	
	public TableFood()
	{
		this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
		this._BookedTable = default(EntityRef<BookedTable>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTable", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idTable
	{
		get
		{
			return this._idTable;
		}
		set
		{
			if ((this._idTable != value))
			{
				if (this._BookedTable.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidTableChanging(value);
				this.SendPropertyChanging();
				this._idTable = value;
				this.SendPropertyChanged("idTable");
				this.OnidTableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string status
	{
		get
		{
			return this._status;
		}
		set
		{
			if ((this._status != value))
			{
				this.OnstatusChanging(value);
				this.SendPropertyChanging();
				this._status = value;
				this.SendPropertyChanged("status");
				this.OnstatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableFood_Bill", Storage="_Bills", ThisKey="idTable", OtherKey="idTable")]
	public EntitySet<Bill> Bills
	{
		get
		{
			return this._Bills;
		}
		set
		{
			this._Bills.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookedTable_TableFood", Storage="_BookedTable", ThisKey="idTable", OtherKey="idTable", IsForeignKey=true)]
	public BookedTable BookedTable
	{
		get
		{
			return this._BookedTable.Entity;
		}
		set
		{
			BookedTable previousValue = this._BookedTable.Entity;
			if (((previousValue != value) 
						|| (this._BookedTable.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._BookedTable.Entity = null;
					previousValue.TableFood = null;
				}
				this._BookedTable.Entity = value;
				if ((value != null))
				{
					value.TableFood = this;
					this._idTable = value.idTable;
				}
				else
				{
					this._idTable = default(int);
				}
				this.SendPropertyChanged("BookedTable");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Bills(Bill entity)
	{
		this.SendPropertyChanging();
		entity.TableFood = this;
	}
	
	private void detach_Bills(Bill entity)
	{
		this.SendPropertyChanging();
		entity.TableFood = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.DateTime _DateCheckIn;
	
	private System.Nullable<System.DateTime> _DateCheckOut;
	
	private int _idTable;
	
	private int _status;
	
	private System.Nullable<int> _discount;
	
	private System.Nullable<double> _totalPrice;
	
	private EntityRef<TableFood> _TableFood;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDateCheckInChanging(System.DateTime value);
    partial void OnDateCheckInChanged();
    partial void OnDateCheckOutChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCheckOutChanged();
    partial void OnidTableChanging(int value);
    partial void OnidTableChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OndiscountChanging(System.Nullable<int> value);
    partial void OndiscountChanged();
    partial void OntotalPriceChanging(System.Nullable<double> value);
    partial void OntotalPriceChanged();
    #endregion
	
	public Bill()
	{
		this._TableFood = default(EntityRef<TableFood>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckIn", DbType="Date NOT NULL")]
	public System.DateTime DateCheckIn
	{
		get
		{
			return this._DateCheckIn;
		}
		set
		{
			if ((this._DateCheckIn != value))
			{
				this.OnDateCheckInChanging(value);
				this.SendPropertyChanging();
				this._DateCheckIn = value;
				this.SendPropertyChanged("DateCheckIn");
				this.OnDateCheckInChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckOut", DbType="Date")]
	public System.Nullable<System.DateTime> DateCheckOut
	{
		get
		{
			return this._DateCheckOut;
		}
		set
		{
			if ((this._DateCheckOut != value))
			{
				this.OnDateCheckOutChanging(value);
				this.SendPropertyChanging();
				this._DateCheckOut = value;
				this.SendPropertyChanged("DateCheckOut");
				this.OnDateCheckOutChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTable", DbType="Int NOT NULL")]
	public int idTable
	{
		get
		{
			return this._idTable;
		}
		set
		{
			if ((this._idTable != value))
			{
				if (this._TableFood.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidTableChanging(value);
				this.SendPropertyChanging();
				this._idTable = value;
				this.SendPropertyChanged("idTable");
				this.OnidTableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
	public int status
	{
		get
		{
			return this._status;
		}
		set
		{
			if ((this._status != value))
			{
				this.OnstatusChanging(value);
				this.SendPropertyChanging();
				this._status = value;
				this.SendPropertyChanged("status");
				this.OnstatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discount", DbType="Int")]
	public System.Nullable<int> discount
	{
		get
		{
			return this._discount;
		}
		set
		{
			if ((this._discount != value))
			{
				this.OndiscountChanging(value);
				this.SendPropertyChanging();
				this._discount = value;
				this.SendPropertyChanged("discount");
				this.OndiscountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float")]
	public System.Nullable<double> totalPrice
	{
		get
		{
			return this._totalPrice;
		}
		set
		{
			if ((this._totalPrice != value))
			{
				this.OntotalPriceChanging(value);
				this.SendPropertyChanging();
				this._totalPrice = value;
				this.SendPropertyChanged("totalPrice");
				this.OntotalPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableFood_Bill", Storage="_TableFood", ThisKey="idTable", OtherKey="idTable", IsForeignKey=true)]
	public TableFood TableFood
	{
		get
		{
			return this._TableFood.Entity;
		}
		set
		{
			TableFood previousValue = this._TableFood.Entity;
			if (((previousValue != value) 
						|| (this._TableFood.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TableFood.Entity = null;
					previousValue.Bills.Remove(this);
				}
				this._TableFood.Entity = value;
				if ((value != null))
				{
					value.Bills.Add(this);
					this._idTable = value.idTable;
				}
				else
				{
					this._idTable = default(int);
				}
				this.SendPropertyChanged("TableFood");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillInfo")]
public partial class BillInfo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _idBill;
	
	private int _idFood;
	
	private System.Nullable<int> _idDrink;
	
	private double _count;
	
	private string _idEmp;
	
	private EntityRef<Drink> _Drink;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Food> _Food;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidBillChanging(int value);
    partial void OnidBillChanged();
    partial void OnidFoodChanging(int value);
    partial void OnidFoodChanged();
    partial void OnidDrinkChanging(System.Nullable<int> value);
    partial void OnidDrinkChanged();
    partial void OncountChanging(double value);
    partial void OncountChanged();
    partial void OnidEmpChanging(string value);
    partial void OnidEmpChanged();
    #endregion
	
	public BillInfo()
	{
		this._Drink = default(EntityRef<Drink>);
		this._Employee = default(EntityRef<Employee>);
		this._Food = default(EntityRef<Food>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBill", DbType="Int NOT NULL")]
	public int idBill
	{
		get
		{
			return this._idBill;
		}
		set
		{
			if ((this._idBill != value))
			{
				this.OnidBillChanging(value);
				this.SendPropertyChanging();
				this._idBill = value;
				this.SendPropertyChanged("idBill");
				this.OnidBillChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFood", DbType="Int NOT NULL")]
	public int idFood
	{
		get
		{
			return this._idFood;
		}
		set
		{
			if ((this._idFood != value))
			{
				if (this._Food.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidFoodChanging(value);
				this.SendPropertyChanging();
				this._idFood = value;
				this.SendPropertyChanged("idFood");
				this.OnidFoodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDrink", DbType="Int")]
	public System.Nullable<int> idDrink
	{
		get
		{
			return this._idDrink;
		}
		set
		{
			if ((this._idDrink != value))
			{
				if (this._Drink.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidDrinkChanging(value);
				this.SendPropertyChanging();
				this._idDrink = value;
				this.SendPropertyChanged("idDrink");
				this.OnidDrinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Float NOT NULL")]
	public double count
	{
		get
		{
			return this._count;
		}
		set
		{
			if ((this._count != value))
			{
				this.OncountChanging(value);
				this.SendPropertyChanging();
				this._count = value;
				this.SendPropertyChanged("count");
				this.OncountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmp", DbType="NVarChar(25)")]
	public string idEmp
	{
		get
		{
			return this._idEmp;
		}
		set
		{
			if ((this._idEmp != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidEmpChanging(value);
				this.SendPropertyChanging();
				this._idEmp = value;
				this.SendPropertyChanged("idEmp");
				this.OnidEmpChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_BillInfo", Storage="_Drink", ThisKey="idDrink", OtherKey="idDrink", IsForeignKey=true)]
	public Drink Drink
	{
		get
		{
			return this._Drink.Entity;
		}
		set
		{
			Drink previousValue = this._Drink.Entity;
			if (((previousValue != value) 
						|| (this._Drink.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Drink.Entity = null;
					previousValue.BillInfos.Remove(this);
				}
				this._Drink.Entity = value;
				if ((value != null))
				{
					value.BillInfos.Add(this);
					this._idDrink = value.idDrink;
				}
				else
				{
					this._idDrink = default(Nullable<int>);
				}
				this.SendPropertyChanged("Drink");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BillInfo", Storage="_Employee", ThisKey="idEmp", OtherKey="idEmp", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.BillInfos.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.BillInfos.Add(this);
					this._idEmp = value.idEmp;
				}
				else
				{
					this._idEmp = default(string);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_BillInfo", Storage="_Food", ThisKey="idFood", OtherKey="idFood", IsForeignKey=true)]
	public Food Food
	{
		get
		{
			return this._Food.Entity;
		}
		set
		{
			Food previousValue = this._Food.Entity;
			if (((previousValue != value) 
						|| (this._Food.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Food.Entity = null;
					previousValue.BillInfos.Remove(this);
				}
				this._Food.Entity = value;
				if ((value != null))
				{
					value.BillInfos.Add(this);
					this._idFood = value.idFood;
				}
				else
				{
					this._idFood = default(int);
				}
				this.SendPropertyChanged("Food");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookedTable")]
public partial class BookedTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idTable;
	
	private string _CustomerName;
	
	private string _CustomerPhone;
	
	private string _CustomerAddress;
	
	private EntityRef<TableFood> _TableFood;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTableChanging(int value);
    partial void OnidTableChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerPhoneChanging(string value);
    partial void OnCustomerPhoneChanged();
    partial void OnCustomerAddressChanging(string value);
    partial void OnCustomerAddressChanged();
    #endregion
	
	public BookedTable()
	{
		this._TableFood = default(EntityRef<TableFood>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTable", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int idTable
	{
		get
		{
			return this._idTable;
		}
		set
		{
			if ((this._idTable != value))
			{
				this.OnidTableChanging(value);
				this.SendPropertyChanging();
				this._idTable = value;
				this.SendPropertyChanged("idTable");
				this.OnidTableChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(30)")]
	public string CustomerName
	{
		get
		{
			return this._CustomerName;
		}
		set
		{
			if ((this._CustomerName != value))
			{
				this.OnCustomerNameChanging(value);
				this.SendPropertyChanging();
				this._CustomerName = value;
				this.SendPropertyChanged("CustomerName");
				this.OnCustomerNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone", DbType="NChar(12)")]
	public string CustomerPhone
	{
		get
		{
			return this._CustomerPhone;
		}
		set
		{
			if ((this._CustomerPhone != value))
			{
				this.OnCustomerPhoneChanging(value);
				this.SendPropertyChanging();
				this._CustomerPhone = value;
				this.SendPropertyChanged("CustomerPhone");
				this.OnCustomerPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddress", DbType="NVarChar(60)")]
	public string CustomerAddress
	{
		get
		{
			return this._CustomerAddress;
		}
		set
		{
			if ((this._CustomerAddress != value))
			{
				this.OnCustomerAddressChanging(value);
				this.SendPropertyChanging();
				this._CustomerAddress = value;
				this.SendPropertyChanged("CustomerAddress");
				this.OnCustomerAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookedTable_TableFood", Storage="_TableFood", ThisKey="idTable", OtherKey="idTable", IsUnique=true, IsForeignKey=false)]
	public TableFood TableFood
	{
		get
		{
			return this._TableFood.Entity;
		}
		set
		{
			TableFood previousValue = this._TableFood.Entity;
			if (((previousValue != value) 
						|| (this._TableFood.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TableFood.Entity = null;
					previousValue.BookedTable = null;
				}
				this._TableFood.Entity = value;
				if ((value != null))
				{
					value.BookedTable = this;
				}
				this.SendPropertyChanged("TableFood");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drink")]
public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idDrink;
	
	private string _name;
	
	private int _idCategoryDrink;
	
	private double _price;
	
	private EntitySet<BillInfo> _BillInfos;
	
	private EntityRef<DrinkCategory> _DrinkCategory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDrinkChanging(int value);
    partial void OnidDrinkChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidCategoryDrinkChanging(int value);
    partial void OnidCategoryDrinkChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    #endregion
	
	public Drink()
	{
		this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
		this._DrinkCategory = default(EntityRef<DrinkCategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDrink", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idDrink
	{
		get
		{
			return this._idDrink;
		}
		set
		{
			if ((this._idDrink != value))
			{
				this.OnidDrinkChanging(value);
				this.SendPropertyChanging();
				this._idDrink = value;
				this.SendPropertyChanged("idDrink");
				this.OnidDrinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategoryDrink", DbType="Int NOT NULL")]
	public int idCategoryDrink
	{
		get
		{
			return this._idCategoryDrink;
		}
		set
		{
			if ((this._idCategoryDrink != value))
			{
				if (this._DrinkCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCategoryDrinkChanging(value);
				this.SendPropertyChanging();
				this._idCategoryDrink = value;
				this.SendPropertyChanged("idCategoryDrink");
				this.OnidCategoryDrinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
	public double price
	{
		get
		{
			return this._price;
		}
		set
		{
			if ((this._price != value))
			{
				this.OnpriceChanging(value);
				this.SendPropertyChanging();
				this._price = value;
				this.SendPropertyChanged("price");
				this.OnpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Drink_BillInfo", Storage="_BillInfos", ThisKey="idDrink", OtherKey="idDrink")]
	public EntitySet<BillInfo> BillInfos
	{
		get
		{
			return this._BillInfos;
		}
		set
		{
			this._BillInfos.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrinkCategory_Drink", Storage="_DrinkCategory", ThisKey="idCategoryDrink", OtherKey="idCategoryDrink", IsForeignKey=true)]
	public DrinkCategory DrinkCategory
	{
		get
		{
			return this._DrinkCategory.Entity;
		}
		set
		{
			DrinkCategory previousValue = this._DrinkCategory.Entity;
			if (((previousValue != value) 
						|| (this._DrinkCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DrinkCategory.Entity = null;
					previousValue.Drinks.Remove(this);
				}
				this._DrinkCategory.Entity = value;
				if ((value != null))
				{
					value.Drinks.Add(this);
					this._idCategoryDrink = value.idCategoryDrink;
				}
				else
				{
					this._idCategoryDrink = default(int);
				}
				this.SendPropertyChanged("DrinkCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BillInfos(BillInfo entity)
	{
		this.SendPropertyChanging();
		entity.Drink = this;
	}
	
	private void detach_BillInfos(BillInfo entity)
	{
		this.SendPropertyChanging();
		entity.Drink = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrinkCategory")]
public partial class DrinkCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idCategoryDrink;
	
	private string _name;
	
	private EntitySet<Drink> _Drinks;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCategoryDrinkChanging(int value);
    partial void OnidCategoryDrinkChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public DrinkCategory()
	{
		this._Drinks = new EntitySet<Drink>(new Action<Drink>(this.attach_Drinks), new Action<Drink>(this.detach_Drinks));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategoryDrink", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int idCategoryDrink
	{
		get
		{
			return this._idCategoryDrink;
		}
		set
		{
			if ((this._idCategoryDrink != value))
			{
				this.OnidCategoryDrinkChanging(value);
				this.SendPropertyChanging();
				this._idCategoryDrink = value;
				this.SendPropertyChanged("idCategoryDrink");
				this.OnidCategoryDrinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrinkCategory_Drink", Storage="_Drinks", ThisKey="idCategoryDrink", OtherKey="idCategoryDrink")]
	public EntitySet<Drink> Drinks
	{
		get
		{
			return this._Drinks;
		}
		set
		{
			this._Drinks.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Drinks(Drink entity)
	{
		this.SendPropertyChanging();
		entity.DrinkCategory = this;
	}
	
	private void detach_Drinks(Drink entity)
	{
		this.SendPropertyChanging();
		entity.DrinkCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _idEmp;
	
	private string _name;
	
	private string _address;
	
	private string _phone;
	
	private EntitySet<BillInfo> _BillInfos;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmpChanging(string value);
    partial void OnidEmpChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
	
	public Employee()
	{
		this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmp", DbType="NVarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string idEmp
	{
		get
		{
			return this._idEmp;
		}
		set
		{
			if ((this._idEmp != value))
			{
				this.OnidEmpChanging(value);
				this.SendPropertyChanging();
				this._idEmp = value;
				this.SendPropertyChanged("idEmp");
				this.OnidEmpChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(60)")]
	public string address
	{
		get
		{
			return this._address;
		}
		set
		{
			if ((this._address != value))
			{
				this.OnaddressChanging(value);
				this.SendPropertyChanging();
				this._address = value;
				this.SendPropertyChanged("address");
				this.OnaddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Char(10)")]
	public string phone
	{
		get
		{
			return this._phone;
		}
		set
		{
			if ((this._phone != value))
			{
				this.OnphoneChanging(value);
				this.SendPropertyChanging();
				this._phone = value;
				this.SendPropertyChanged("phone");
				this.OnphoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BillInfo", Storage="_BillInfos", ThisKey="idEmp", OtherKey="idEmp")]
	public EntitySet<BillInfo> BillInfos
	{
		get
		{
			return this._BillInfos;
		}
		set
		{
			this._BillInfos.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BillInfos(BillInfo entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_BillInfos(BillInfo entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idFood;
	
	private string _name;
	
	private int _idCategoryFood;
	
	private double _price;
	
	private EntitySet<BillInfo> _BillInfos;
	
	private EntityRef<FoodCategory> _FoodCategory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidFoodChanging(int value);
    partial void OnidFoodChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidCategoryFoodChanging(int value);
    partial void OnidCategoryFoodChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    #endregion
	
	public Food()
	{
		this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
		this._FoodCategory = default(EntityRef<FoodCategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFood", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idFood
	{
		get
		{
			return this._idFood;
		}
		set
		{
			if ((this._idFood != value))
			{
				this.OnidFoodChanging(value);
				this.SendPropertyChanging();
				this._idFood = value;
				this.SendPropertyChanged("idFood");
				this.OnidFoodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategoryFood", DbType="Int NOT NULL")]
	public int idCategoryFood
	{
		get
		{
			return this._idCategoryFood;
		}
		set
		{
			if ((this._idCategoryFood != value))
			{
				if (this._FoodCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCategoryFoodChanging(value);
				this.SendPropertyChanging();
				this._idCategoryFood = value;
				this.SendPropertyChanged("idCategoryFood");
				this.OnidCategoryFoodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
	public double price
	{
		get
		{
			return this._price;
		}
		set
		{
			if ((this._price != value))
			{
				this.OnpriceChanging(value);
				this.SendPropertyChanging();
				this._price = value;
				this.SendPropertyChanged("price");
				this.OnpriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_BillInfo", Storage="_BillInfos", ThisKey="idFood", OtherKey="idFood")]
	public EntitySet<BillInfo> BillInfos
	{
		get
		{
			return this._BillInfos;
		}
		set
		{
			this._BillInfos.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategory_Food", Storage="_FoodCategory", ThisKey="idCategoryFood", OtherKey="idCategoryFood", IsForeignKey=true)]
	public FoodCategory FoodCategory
	{
		get
		{
			return this._FoodCategory.Entity;
		}
		set
		{
			FoodCategory previousValue = this._FoodCategory.Entity;
			if (((previousValue != value) 
						|| (this._FoodCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FoodCategory.Entity = null;
					previousValue.Foods.Remove(this);
				}
				this._FoodCategory.Entity = value;
				if ((value != null))
				{
					value.Foods.Add(this);
					this._idCategoryFood = value.idCategoryFood;
				}
				else
				{
					this._idCategoryFood = default(int);
				}
				this.SendPropertyChanged("FoodCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BillInfos(BillInfo entity)
	{
		this.SendPropertyChanging();
		entity.Food = this;
	}
	
	private void detach_BillInfos(BillInfo entity)
	{
		this.SendPropertyChanging();
		entity.Food = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodCategory")]
public partial class FoodCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idCategoryFood;
	
	private string _name;
	
	private EntitySet<Food> _Foods;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCategoryFoodChanging(int value);
    partial void OnidCategoryFoodChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public FoodCategory()
	{
		this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategoryFood", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int idCategoryFood
	{
		get
		{
			return this._idCategoryFood;
		}
		set
		{
			if ((this._idCategoryFood != value))
			{
				this.OnidCategoryFoodChanging(value);
				this.SendPropertyChanging();
				this._idCategoryFood = value;
				this.SendPropertyChanged("idCategoryFood");
				this.OnidCategoryFoodChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategory_Food", Storage="_Foods", ThisKey="idCategoryFood", OtherKey="idCategoryFood")]
	public EntitySet<Food> Foods
	{
		get
		{
			return this._Foods;
		}
		set
		{
			this._Foods.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Foods(Food entity)
	{
		this.SendPropertyChanging();
		entity.FoodCategory = this;
	}
	
	private void detach_Foods(Food entity)
	{
		this.SendPropertyChanging();
		entity.FoodCategory = null;
	}
}
#pragma warning restore 1591
